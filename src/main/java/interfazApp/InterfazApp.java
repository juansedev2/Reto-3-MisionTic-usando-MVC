/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfazApp;

import controlador.Controlador;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan Sebastian
 */
public final class InterfazApp extends javax.swing.JFrame {  // Una clase final es aquella que no puede ser heredada, ya que esta no puede cambiar nada de esta

    /**
     * Creates new form InterfazApp
     */
    private boolean completo;  // Variable de control de datos completos
    private int total_cuerpos;  // Contabilizar cuantos cuerpos de agua han sido ingresados
    private Controlador controlador;  // Controlador para comunicarme con mundo

    public InterfazApp() {
        this.total_cuerpos = 0;
        this.completo = false;
        initComponents();  // Inicar la interfaz
        this.controlador = new Controlador();  // Iniciar el controlador
        ocultarEdicionTextArea();  // Bloquear la edición de las áreas de texto
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("LECTOR DE CLASIFICACIÓN IRCA");
        jLabel1.setToolTipText("");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Nombre del cuerpo de agua");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("Municipio");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Tipo de agua");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Id");

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel6.setText("Tipo de cuerpo de agua");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setText("IRCA (número)");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel8.setText("Datos ingresados");

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setText("Salidas");

        jButton1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton1.setText("INGRESAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton2.setText("PROCESAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton3.setText("LIMPIAR DATOS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("REINICIAR PROGRAMA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Instrucciones");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(371, 371, 371)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(107, 107, 107))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(112, 112, 112)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel5)
                                        .addComponent(jTextField4)
                                        .addComponent(jTextField5)
                                        .addComponent(jTextField6)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(96, 96, 96)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addGap(27, 27, 27)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(55, 55, 55)
                        .addComponent(jButton3)
                        .addGap(43, 43, 43)
                        .addComponent(jButton4)))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // BOTÓN DE INGRESO DE DATOS
        // Debo validar que estén todos los datos no estén vacios obteniendo EL TEXTO, que es el valor que necesito
        if (jTextField1.getText().equals("") || jTextField2.getText().equals("") || jTextField3.getText().equals("") || jTextField4.getText().equals("") || jTextField5.getText().equals("") || jTextField6.getText().equals("")) {
            this.completo = false;
            JOptionPane.showMessageDialog(rootPane, "Datos incompletos, por favor complete el formulario");
        } else {
            try {  // Prueba de excepción porque no puedo aceptar un valor numérico en el campo IRCA
                // Evaluar si el campo IRCA es un número
                Float flotante = Float.parseFloat(jTextField6.getText());
                // En caso de ya haber recibido la información, debo procesarla
                // Podría hacer validaciones de cada uno, pero tomaría mucho más tiempo (dejarlo después)
                // Mejor idea (este botón no hará el procesamiento, solo ), asignar al atributo de InterfazApp que están completos
                this.completo = true;
                // Se cuenta un nuevo cuerpo de agua ingresado
                this.total_cuerpos++;
                // Obtener los datos registrados y eliminar los espacios en blanco al inicio y al final
                String cadena = jTextField1.getText().trim() + " " + jTextField2.getText().trim() + " " + jTextField3.getText().trim() + " " + jTextField4.getText().trim() + " " + jTextField5.getText().trim() + " " + jTextField6.getText();
                System.out.println(cadena);
                this.controlador.setCadena_datos(cadena);
                this.controlador.agregarCuerpo();
                llenarTextAreaEntrada(cadena);
                // Aviso que se ha ingresado un nuevo cuerpo de agua
                JOptionPane.showMessageDialog(rootPane, "Se ha registrado un nuevo cuerpo de agua");
                reiniciarCampos();
            } catch (HeadlessException | NumberFormatException e) {
                System.out.println("ERROR: " + e);
                JOptionPane.showMessageDialog(rootPane, "CAMPO IRCA DEBE SER UN NÚMERO");
                jTextField6.setText("");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // BOTÓN DE LIMPIAR DATOS, acá debo limpiar todos los campos en cuanto se selccione este botón
        // La única forma de que esto suceda, es el evento de presionar en ese botón, por lo tanto accede a este método y solo debemos reiniciar todos los campos
        reiniciarCampos();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // BOTÓN DE PROCESAR DATOS
        if (this.total_cuerpos == 0) {  // En caso de nunca haber registrado cuerpos de agua
            JOptionPane.showMessageDialog(rootPane, "No ha registrado al menos un cuerpo de agua");
        } else {
            // Ya se puede permitir el procesamiento de datos y solo necesito mostrarlos a la vista
            llenarTextAreaSalida(this.controlador.devolverNivelesCompletos());
            this.controlador.realizarCalculoMedios();
            llenarTextAreaSalida(this.controlador.devolverInferiores());
            llenarTextAreaSalida(this.controlador.devolverMedios());
            llenarTextAreaSalida(this.controlador.devolverMasBajo());
            // Después de terminar el procesamiento de datos, debo de "reiniciar" el programa, ya los datos que tengo no los puedo seguir usando
            bloquearBotones();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
         // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         // TODO add your handling code here:
         // BOTON DE REINICIAR EL PROGRAMA
         reiniciarCampos();
         vaciarAreasTexto();
         // Reiniciar el controlador para que elimine los datos
        this.controlador = null;
        this.controlador = new Controlador();  // Volver a iniciar el controlador
        this.total_cuerpos = 0;
        this.completo = false;
        // Desbloquear los botones nuevamente
        desbloquearBotones();
        JOptionPane.showMessageDialog(rootPane, "SISTEMA REINICIADO");

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // Botón de instrucciones:
        String cadena_instrucciones = "SISTEMA DE LECTURA IRCA \n INSTRUCCIONES: \n"
                + "\n1. Llena los campos con los datos de los cuerpos de agua, el campo IRCA SOLO ADMITE NÚMEROS, así que digita la clasificación IRCA en su rango perteneciente (0 -100)"
                + "\n2. Cuando los datos estén todos llenos, selecciona la opción de ingresar y entonces se indicará que se ha agregado un nuevo cuerpo de agua"
                + "\n3. Puedes llenar la cantidad de cuerpos de agua que desees, no hay límite"
                + "\n4. Si tienes varios errores en los campos, puedes reinicarlos con el botón de LIMPIAR TODO y entonces los campos se limpian automáticamente"
                + "\n5. A medida que ingreses los cuerpos de agua, vas a poder ver sus datos en el campo de texto de entrada"
                + "\n6. Cuando hayas registrado todos los cuerpos de agua, selecciona el botón de PROCESAR para que el sistema haga el cálculo correspondiente y el resultado aparecerá en el área de texto de salida"
                + "\n"
                + "\n COSAS A TENER EN CUENTA:"
                + "\n o Debe existir al menos un cuerpo de agua para el procesamiento, de lo contrario el sistema no hará ningún cálculo"
                + "\n o Si digitas en el campo de IRCA un valor no numérico, el sistema te avisará y en caso de corregirlo pero no llegara a funcionar, por favor oprime el botón de limpiar todos los campos y vuelve a llenarlo todo adecuadamente y el problema se soluciona"
                + "\n o Una vez confirmado el procesamiento de datos, ya no puedes volver a utilizar los mismos, entonces es necesario reinicar el sistema, para ello por favor selecciona la opción de REINICIAR PROGRAMA y el sistema se reinicirá para que puedas volver a usarlo"
                + "\n o Si se llegáse a presentar un bug/problema con el sistema, comunicate con soporte y trabajaremos en el sistema para corregirlo, tu colaboración es importante para nosotros, gracias."
                + "\n"
                + "\n ACERCA DE ESTE PROGRAMA: "
                + "\n REALIZADO POR: JUAN SEBASTIAN ARIAS (juansedev2 Github)"
                + "\n o CRÉDITOS DE DESARROLLO DE ESTE PROGRAMA AL AUTOR MENCIONADO ARRIBA"
                + "\n o Prohibida su distribución, alteración y/o manipulación sin acceso autorizado por el autor";
        JOptionPane.showMessageDialog(rootPane, cadena_instrucciones);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void reiniciarCampos() {  // Método para reiniciar todos los campos (usado luego de un registro)
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
    }

    private void ocultarEdicionTextArea() {
        // No permitir que las áreas de texto sean editables
        jTextArea1.setEditable(false);
        jTextArea3.setEditable(false);
    }

    // Función para definir text area de entrada
    private void llenarTextAreaEntrada(String contenido) {
        /*
        if (jTextArea1.getText().length() == 0) {  // Al principio está vacio, entonces pues no debo saltar una línea
            jTextArea1.setText(contenido);
        } else {
            jTextArea1.setText(jTextArea1.getText() + "\n" + contenido);
        }*/
        jTextArea1.append(contenido + "\n");  // Mejor manera de añadir texto (append para agregar texto del que ya hay y salto de lìnea para que el pròximo inicie en nuva línea)
    }

    // Función para definir text area de salida
    private void llenarTextAreaSalida(String contenido) {
        /*
        if (jTextArea3.getText().length() == 0) {  // Al principio está vacio, entonces pues no debo saltar una línea
            jTextArea3.setText(contenido);
        } else {
            jTextArea3.setText(jTextArea3.getText() + "\n" + contenido);
        }*/
        jTextArea3.append(contenido + "\n");  // Mejor manera de añadir texto (append para agregar texto del que ya hay y salto de lìnea para que el pròximo inicie en nuva línea)
    }

    // Función para eliminar el contenido del text area de entrada
    private void vaciarAreasTexto() {
        jTextArea1.setText("");
        jTextArea3.setText("");
    }

    // Función para bloquear botones de ingreso, procesamiento y limpieza de datos, necesito obligar al usuario que use el botón de reiniciar el programa
    private void bloquearBotones() {
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
    }

    // Función para desbloquear los botones, destinado para el reinicio del programa
    private void desbloquearBotones() {
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
